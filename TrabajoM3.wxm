/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 22.04.0 ] */
/* [wxMaxima: comment start ]
Clase:311               GRUPO4
Javier Lucia
Celia Jimenez
Raquel Cuartero
Miguel Ángel Calvera
Vlad Dumitru
   [wxMaxima: comment end   ] */


/* [wxMaxima: section start ]
PVI
   [wxMaxima: section end   ] */


/* [wxMaxima: input   start ] */
x*'diff(y,x)-y=x**2*exp(-3*x);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
solve(x*('diff(y,x,1))-y=x^2*%e^(-3*x),'diff(y,x));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: subsect start ]
Solucion exacta
   [wxMaxima: subsect end   ] */


/* [wxMaxima: input   start ] */
ode2(x*'diff(y,x)-y=x**2*exp(-3*x),y,x);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Comprobacion existencia y unicidad
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
f(x,y):=(%e^(-3*x)*(%e^(3*x)*y+x^2))/x;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
diff(f(x,y),x);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Como se ve, es continua en x=1, pero no en x=0
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
Por ello, solo existe el a)
   [wxMaxima: comment end   ] */


/* [wxMaxima: subsect start ]
Solucion
   [wxMaxima: subsect end   ] */


/* [wxMaxima: input   start ] */
ic1(y=x*(%c-%e^(-3*x)/3),x=1,y=0);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
solex(x):=(%e^(-3*x-3)*(x*%e^(3*x)-%e^3*x))/3;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: subsect start ]
Metodo de euler
   [wxMaxima: subsect end   ] */


/* [wxMaxima: comment start ]
Opcion para que de aproximaciones
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
number:true;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Lo hacemos manualmente.
Empezamos definiendo la funcion y la recursividad
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
f(x,y):=(%e^(-3*x)*(%e^(3*x)*y+x^2))/x;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Al algoritmo visto en practicas se le añade radcan, el cual simplifica las expresiones
Si no, maxima no sería capaz de soportarlo. Habrá que tener en cuenta que la solucion
por ello, tendrá menor precisión aún
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
kill(x,y,h);
x[0]:1; y[0]:0; h:1/20;
x[n]:=x[0]+n*h;
y[n]:=radcan(y[n-1]+h*f(x[n-1],y[n-1]));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
sol20:makelist(float([x[n],y[n]]),n,0,20)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Error (para usarlo más tarde)
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
ErrorEul20:makelist(float([x[n],abs(y[n]-solex(x[n]))]),n,0,20);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Análogamente con 40
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
kill(x,y);
x[0]:1; y[0]:0; h:1/40;
x[n]:=x[0]+n*h;
y[n]:=radcan(y[n-1]+h*f(x[n-1],y[n-1]));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
sol40:makelist(float([x[n],y[n]]),n,0,40)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
ErrorEul40:makelist(float([x[n],abs(y[n]-solex(x[n]))]),n,0,40);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
80
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
kill(x,y);
x[0]:1; y[0]:0; h:1/80;
x[n]:=x[0]+n*h;
y[n]:=radcan(y[n-1]+h*f(x[n-1],y[n-1]));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
sol80:makelist(float([x[n],y[n]]),n,0,80)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
ErrorEul80:makelist(float([x[n],abs(y[n]-solex(x[n]))]),n,0,80)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
160
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
kill(x,y);
x[0]:1; y[0]:0; h:1/160;
x[n]:=x[0]+n*h;
y[n]:=radcan(y[n-1]+h*f(x[n-1],y[n-1]));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
sol160:makelist(float([x[n],y[n]]),n,0,160)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
ErrorEul160:makelist(float([x[n],abs(y[n]-solex(x[n]))]),n,0,160)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: subsect start ]
Representa las soluciones
   [wxMaxima: subsect end   ] */


/* [wxMaxima: input   start ] */
solex(x):=(%e^(-3*x-3)*(x*%e^(3*x)-%e^3*x))/3;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Todas juntas:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
wxplot2d([[discrete,sol20],[discrete,sol40],[discrete,sol80],[discrete,sol160],solex(x)],[x,1,2],
[style,[points,0.5]],[legend,"y20[n]","y40[n]","y80[n]","y160[n]","y(x)"]);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
20 y real
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
wxplot2d([[discrete,sol20],solex(x)],[x,1,2],
[style,[points,1]],[legend,"y20[n]","y(x)"]);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Error en 20
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
wxplot2d([[discrete,ErrorEul20]],[style,[points,1.1]],[legend,"Error[n]"],[x,1,2]);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
40 y real
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
wxplot2d([[discrete,sol40],solex(x)],[x,1,2],
[style,[points,1]],[legend,"y40[n]","y(x)"]);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Error en 40
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
wxplot2d([[discrete,ErrorEul40]],[style,[points,1.1]],[legend,"Error[n]"],[x,1,2]);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
80 y real
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
wxplot2d([[discrete,sol80],solex(x)],[x,1,2],
[style,[points,1.0]],[legend,"y80[n]","y(x)"]);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Error en 80
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
wxplot2d([[discrete,ErrorEul80]],[style,[points,1.1]],[legend,"Error[n]"],[x,1,2]);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
160 y real
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
wxplot2d([[discrete,sol160],solex(x)],[x,1,2],
[style,[points,1.0]],[legend,"y160[n]","y(x)"]);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Error en 160
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
wxplot2d([[discrete,ErrorEul160]],[style,[points,1.1]],[legend,"Error[n]"],[x,1,2]);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: subsect start ]
RK4
   [wxMaxima: subsect end   ] */


/* [wxMaxima: input   start ] */
f(x,y):=(%e^(-3*x)*(%e^(3*x)*y+x^2))/x;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Esta vez, en vez de usar numer, que haría que algunas expresiones sean decimales, meteremos las expresiones directamente en bfloat()
lo cual los aproximará a un número decimal de 16 posiciones (se podría cambiar la aproximación a mayor numero de decimales, pero,
dado que es un ejercicio académico, no vamos a forzar el ordenador, además, no afecta casi a la aproximacion del método)
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
numer;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Ahora definimos x[n] e y[n] y calculamos la aproximacion de 20 pasos
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
kill(x,y,Y1,Y2,Y3,Y4);
x[0]:1; y[0]:0.0; h:1/20;
x[n]:=x[0]+n*h$

Y1[n]:=y[n]$
Y2[n]:=y[n]+h*f(x[n],Y1[n])/2$
Y3[n]:=y[n]+h*f(x[n]+h/2,Y2[n])/2$

Y4[n]:=y[n]+h*f(x[n]+h/2,Y3[n])$
y[n]:=bfloat(y[n-1]+ h*(f(x[n-1],Y1[n-1])/6+f(x[n-1]+h/2,Y2[n-1])/3+f(x[n-1]+h/2,Y3[n-1])/3 + f(x[n-1]+h,Y4[n-1])/6));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Tras definir el método exactamente como se ha visto en practicas, pero añadiendo el bfloat() para que máxima no tenga que arrastrar
una expresion demasiado larga, creamos la lista para 20 pasos.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
solr20:makelist(float([x[n],y[n]]),n,0,20)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Error(Se usará posteriormente)
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
solex(x):=(%e^(-3*x-3)*(x*%e^(3*x)-%e^3*x))/3;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
ErrorRK420:makelist(float([x[n],abs(y[n]-solex(x[n]))]),n,0,20)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Análogamente hacemos lo mismo para 40 pasos, sin olvidarnos de eliminar las variables ya usadas anteriormente
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
kill(x,y,Y1,Y2,Y3,Y4);
x[0]:1; y[0]:0.0; h:1/40;
x[n]:=x[0]+n*h$

Y1[n]:=y[n]$
Y2[n]:=y[n]+h*f(x[n],Y1[n])/2$
Y3[n]:=y[n]+h*f(x[n]+h/2,Y2[n])/2$

Y4[n]:=y[n]+h*f(x[n]+h/2,Y3[n])$
y[n]:=bfloat(y[n-1]+ h*(f(x[n-1],Y1[n-1])/6+f(x[n-1]+h/2,Y2[n-1])/3+f(x[n-1]+h/2,Y3[n-1])/3 + f(x[n-1]+h,Y4[n-1])/6));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
solr40:makelist(float([x[n],y[n]]),n,0,40)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
ErrorRK440:makelist(float([x[n],abs(y[n]-solex(x[n]))]),n,0,40)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
80
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
kill(x,y,Y1,Y2,Y3,Y4);
x[0]:1; y[0]:0.0; h:1/80;
x[n]:=x[0]+n*h$
Y1[n]:=y[n]$
Y2[n]:=y[n]+h*f(x[n],Y1[n])/2$
Y3[n]:=y[n]+h*f(x[n]+h/2,Y2[n])/2$
Y4[n]:=y[n]+h*f(x[n]+h/2,Y3[n])$
y[n]:=bfloat(y[n-1]+ h*(f(x[n-1],Y1[n-1])/6+f(x[n-1]+h/2,Y2[n-1])/3+f(x[n-1]+h/2,Y3[n-1])/3 + f(x[n-1]+h,Y4[n-1])/6));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
solr80:makelist(float([x[n],y[n]]),n,0,80)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
ErrorRK480:makelist(float([x[n],abs(y[n]-solex(x[n]))]),n,0,80)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
160
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
kill(x,y,Y1,Y2,Y3,Y4);
x[0]:1; y[0]:0.0; h:1/160;
x[n]:=x[0]+n*h$
Y1[n]:=y[n]$
Y2[n]:=y[n]+h*f(x[n],Y1[n])/2$
Y3[n]:=y[n]+h*f(x[n]+h/2,Y2[n])/2$
Y4[n]:=y[n]+h*f(x[n]+h/2,Y3[n])$
y[n]:=bfloat(y[n-1]+ h*(f(x[n-1],Y1[n-1])/6+f(x[n-1]+h/2,Y2[n-1])/3+f(x[n-1]+h/2,Y3[n-1])/3 + f(x[n-1]+h,Y4[n-1])/6));
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
solr160:makelist([x[n],y[n]],n,0,160)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
ErrorRK4160:makelist(float([x[n],abs(y[n]-solex(x[n]))]),n,0,160)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Para comprobar que efectivamente que hemos hecho bien el método RK4, y que bfloat no ha influido demasiado,
lo vamos a representar gráficamente.
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
solex(x):=(%e^(-3*x-3)*(x*%e^(3*x)-%e^3*x))/3;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
20 y real
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
wxplot2d([[discrete,solr20],solex(x)],[x,1,2],
[style,[points,1]],[legend,"y20[n]","y(x)"]);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Error en 20
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
wxplot2d([[discrete,ErrorRK420]],
[style,[points,1.1]],[legend,"Error[n]"],[x,1,2]);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
40 y real
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
wxplot2d([[discrete,solr40],solex(x)],[x,1,2],
[style,[points,1]],[legend,"y40[n]","y(x)"]);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Error en 40
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
wxplot2d([[discrete,ErrorRK440]],[style,[points,1.1]],[legend,"Error[n]"],[x,1,2]);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
80 y real
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
wxplot2d([[discrete,solr80],solex(x)],[x,1,2],
[style,[points,1.0]],[legend,"y80[n]","y(x)"]);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Error en 80
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
wxplot2d([[discrete,ErrorRK480]],
[style,[points,1.1]],[legend,"Error[n]"],[x,1,2]);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
160 y real
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
wxplot2d([[discrete,solr160],solex(x)],[x,1,2],
[style,[points,1.0]],[legend,"y160[n]","y(x)"]);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Error en 160
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
wxplot2d([[discrete,ErrorRK4160]],
[style,[points,1.1]],[legend,"Error[n]"],[x,1,2]);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: subsect start ]
MEG de cada caso
   [wxMaxima: subsect end   ] */


/* [wxMaxima: subsect start ]
Completar Tabla
   [wxMaxima: subsect end   ] */


/* [wxMaxima: comment start ]
Error maximo en EULER
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
Con h =20 => El error maximo es de  
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
ErrE20:makelist(ErrorEul20[n][2],n,1,21)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
apply(max,ErrE20);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Con h =40 => El error maximo es de  
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
ErrE40:makelist(ErrorEul40[n][2],n,1,41)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
apply(max,ErrE40);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Con h =80 => El error maximo es de  
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
ErrE80:makelist(ErrorEul80[n][2],n,1,81)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
apply(max,ErrE80);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Con h =160 => El error maximo es de  
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
ErrE160:makelist(ErrorEul160[n][2],n,1,161)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
apply(max,ErrE160);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Error maximo en Runge-Kuta
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
Con h =20 => El error maximo es de  
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
ErrRK420:makelist(ErrorRK420[n][2],n,1,21)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
apply(max,ErrRK420);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Con h =40 => El error maximo es de  
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
ErrRK440:makelist(ErrorRK440[n][2],n,1,41)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
apply(max,ErrRK440);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Con h =80 => El error maximo es de  
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
ErrRK480:makelist(ErrorRK480[n][2],n,1,81)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
apply(max,ErrRK480);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Con h =160 => El error maximo es de  
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
ErrRK4160:makelist(ErrorRK4160[n][2],n,1,161)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
apply(max,ErrRK4160);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: subsect start ]
Verificar errores con resultado teórico
   [wxMaxima: subsect end   ] */


/* [wxMaxima: section start ]
Dado el problema de contorno...
   [wxMaxima: section end   ] */


/* [wxMaxima: input   start ] */
calculamatriz(funp,funq,a,b,n):=block(
    [h],
    h:(b-a)/n,
    A:zeromatrix(n+1,n+1),
    A[1,1]:1,
    A[n+1,n+1]:1,
    for i:2 thru n do (
        A[i,i]:1+(h^2/2)*funq(a+(i-1)*h),
        A[i,i-1]:-(1/2)*(1+(h/2)*funp(a+(i-1)*h)),
        A[i,i+1]:-(1/2)*(1-(h/2)*funp(a+(i-1)*h))
    ),
    A
)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
calculatermind(funr,a,b,n,alfa,beta):=block(
    [h],
    h:(b-a)/n,
    R:zeromatrix(1,n+1),
    R[1,1]:alfa,
    R[1,n+1]:beta,
    for i:2 thru n do R[1,i]:(h^2/2)*funr(a+(i-1)*h),
    R
)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
restridiag(A,B):=block(
    [c],
    n:length(A),
    for i:2 thru n do (
        c:-A[i,i-1]/A[i-1,i-1],
        A[i,i]:A[i,i]+c*A[i-1,i],
        B[1,i]:B[1,i]+c*B[1,i-1],
        y[n]:B[1,n]/A[n,n]),
    for i:n-1 thru 1 step -1 do (
        y[i]:(B[1,i]-A[i,i+1]*y[i+1])/A[i,i]
    ),
    lista:makelist(y[i], i,1,n),
    lista
)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
calculamatrizupwind(funp,funq,a,b,n):=block(
    [h],
    h:(b-a)/n,
    A:zeromatrix(n+1,n+1),
    A[1,1]:1,
    A[n+1,n+1]:1,
    for i:2 thru n do (
        A[i,i]:1+(h/2)*abs(funp(a+(i-1)*h))+((h^2)/2)*funq(a+(i-1)*h),
        A[i,i-1]:-(1/2)-(h/4)*(abs(funp(a+(i-1)*h))+funp(a+(i-1)*h)),
        A[i,i+1]:-(1/2)+(h/4)*(funp(a+(i-1)*h)-abs(funp(a+(i-1)*h)))
    ),
    A
)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: subsect start ]
Solución del problema de contorno
   [wxMaxima: subsect end   ] */


/* [wxMaxima: input   start ] */
ec1:-'diff(y,x,2)+y=x;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
solgen1:ode2(ec1, y, x);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
bc2(solgen1,x=0,y=0,x=1,y=-1);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
solex1(x):=-(2*%e^(x+1))/(%e^2-1)+(2*%e^(1-x))/(%e^2-1)+x;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
p(x):=0;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
q(x):=1;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
r(x):=x;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
a:0;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
b:1;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
numer:true;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: subsect start ]
Método upwind
   [wxMaxima: subsect end   ] */


/* [wxMaxima: comment start ]
N:10
   [wxMaxima: comment end   ] */


/* [wxMaxima: subsect start ]
Diferencias centrales
   [wxMaxima: subsect end   ] */


/* [wxMaxima: comment start ]
N=10
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
A:calculamatriz(p,q,0,1,10);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
R:calculatermind(r,0,1,10,1,1);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
U:restridiag(A,R);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
solaprox11:makelist([a+(i-1)*(b-a)/10,U[i]],i,1,11);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Errores:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
error11:makelist(abs(solex1(a+(i-1)*(b-a)/10)-U[i]),i,1,11);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
maximo error:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
maxerror1:apply(max,error11);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
N=20 B,S,T
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
B:calculamatriz(p,q,0,1,20);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
S:calculatermind(r,0,1,20,1,1);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
T:restridiag(B,S);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
solaprox22:makelist([a+(i-1)*(b-a)/20,T[i]],i,1,11);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Errores:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
error22:makelist(abs(solex1(a+(i-1)*(b-a)/20)-T[i]),i,1,11);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
máximo error:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
maxerror2:apply(max,error22);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
N=40 M,P,Q
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
M:calculamatriz(p,q,0,1,40);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
P:calculatermind(r,0,1,40,1,1);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
Q:restridiag(M,P);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
solaprox33:makelist([a+(i-1)*(b-a)/40,Q[i]],i,1,11);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Errores:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
error33:makelist(abs(solex1(a+(i-1)*(b-a)/40)-Q[i]),i,1,11);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Máximo error:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
maxerror3:apply(max,error33);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
N:10;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
A_U_1:calculamatrizupwind(p,q,0,10,10);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
R_U_1:calculatermind(r,0,10,10,11,11);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
U_U_1:restridiag(A_U_1,R_U_1);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
solaprox_U_1:makelist([a+(i-1)*(b-a)/10,U_U_1[i]],i,1,7);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Errores:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
solaprox_U_1;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
errorU1:makelist(abs(solaprox_U_1[i][2]-solex1(solaprox_U_1[i][1])),i,1,7);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
N=20
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
kill(N);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
N:20;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
A_U_2:calculamatrizupwind(p,q,0,20,20);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
R_U_2:calculatermind(r,0,20,20,11,11);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
U_U_2:restridiag(A_U_2,R_U_2);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
solaprox_U_22:makelist([a+(i-1)*(b-a)/20,U_U_2[i]],i,1,7);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
Errores:
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
solaprox_U_22;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
errorU2:makelist(abs(solaprox_U_22[i][2]-solex1(solaprox_U_22[i][1])),i,1,7);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
N=40
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
kill(N);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
N:40;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
A_U_3:calculamatrizupwind(p,q,0,40,40);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
R_U_3:calculatermind(r,0,40,40,11,11);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
U_U_3:restridiag(A_U_3,R_U_3);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
solaprox_U_33:makelist([a+(i-1)*(b-a)/40,U_U_3[i]],i,1,7);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: subsect start ]
CENTRALES
   [wxMaxima: subsect end   ] */


/* [wxMaxima: comment start ]
maximo error N10/N20= 2^p p=1 para ser coherente
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
apply(max,error11)/apply(max,error22);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
UPWIND
   [wxMaxima: comment end   ] */


/* [wxMaxima: comment start ]
maximo error N10/N20= 2^p p=0 para ser coherente
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
apply(max,errorU1)/apply(max,errorU2);
/* [wxMaxima: input   end   ] */



/* Old versions of Maxima abort on loading files that end in a comment. */
"Created with wxMaxima 22.04.0"$
